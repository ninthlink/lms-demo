<?php
/**
 * @file
 * Code for the elite_store feature.
 */

include_once 'elite_store.features.inc';


/**
 * Implments hook_form_FORM_ID_alter().
 */
function elite_store_form_store_node_form_alter(&$form, &$form_state, $form_id) {
  // Unless the editing user is an administrator, hide the store employee item.
  global $user;

  if (!in_array('administrator', array_values($user->roles))) {
    hide($form['field_store_employees']);
  }
}

/**
 * Implements hook_node_validate().
 *
 * NO LONGER NECESSARY AS OF 3/13/14
 * 
 * Part of the employee validation process, if the logged in user
 *   is a manger and has already created a store, they cannot proceed.
 *
 * @todo This may become problematic in the future as managers move stores
 *       It can be solved by changing the authorship of existing stores.
 *
function elite_store_node_validate($node, $form, $form_state) {
  // Check for a previously created and published store.
  global $user;
  // As long as the user is not an admin
  // @todo There may be other roles which are exempt.
  if ($user->uid != 1) {
    $query = new EntityFieldQuery;
    $result = $query
      ->entityCondition('entity_type', 'node')
      ->propertyCondition('status', 1)
      ->propertyCondition('type', 'store')
      ->propertyCondition('uid', $user->uid)
      ->execute();

    if (count($result) != 0) {
      form_set_error('title', t('You cannot create another store.'));
      // @todo stop processing errors now. also move this to an access page.
    }

    // The store's region should match the user's region.
    $user_object = user_load($user->uid);
    $user_region = field_get_items('user', $user_object, 'field_region');

    if ($form_state['values']['field_store_region'][LANGUAGE_NONE][0]['value'] !=
      $user_region[0]['value']) {
      form_set_error('field_store_region', t('Your region must match the store region'));
    }
  }
}
*/
/**
 * Check if a store exists
 *
 * @param $store_id
 * @return boolean
 */
function elite_store_valid_store_id($store_id) {
  $query = new EntityFieldQuery;

  $result = $query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'store')
		->propertyCondition('status', 1)
    ->fieldCondition('field_storeid', 'value', $store_id, '=')
		->addMetaData('account', user_load(1))
		//->addTag('eliteqdbg')
		->count()
		->execute();
	
	//watchdog('elite_store chk', 'check for valid store_id : '. $store_id .' : does store_id = 123? '. ($store_id == '123' ? 'YES' : 'NO?') .'<br />results <pre>'. print_r($result,true) .'</pre>');
	
  return ($result > 0);
}
function elite_store_query_alter($query) {
	if ( $query->hasTag('eliteqdbg') ) {
		watchdog('elite query dbg', 'q string : '. (string)$query .'<br /><br /><pre>'. print_r($query,true) .'</pre>');
	}
}
/**
 * All-purpose function to load a store entity. Pass it an array with
 *   the kind of value you're providing and it will return an entity.
 *
 * @param array $lookupval
 * @return entity store  or false
 */

function elite_store_load_store($lookupval = array()) {
  if (array_key_exists('store_id', $lookupval)) {
    $store_id = $lookupval['store_id'];
    $query = new EntityFieldQuery;

    $result = $query
      ->entityCondition('entity_type', 'node')
			->entityCondition('bundle', 'store')
      ->propertyCondition('status', 1)
      ->fieldCondition('field_storeid', 'value', $store_id, '=')
			->addMetaData('account', user_load(1))
      ->execute();

    if (count($result) > 0) {
      $id = array_keys($result['node']);
      $store = entity_load('node', $id);

      // Return just the object.
      return reset($store);
    }
  }

  return FALSE;
}