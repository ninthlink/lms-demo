<?php
/**
 * @file
 * Code related to validating users and stores
 */


/**
 * Implements hook_form_alter().
 *
 * This will alter the user registration form to add a store field
 * that can be used for both the employees and managers
 *
 * @todo if this is the only alter, pull it into a form-id alter
 */
function elite_validation_form_alter(&$form, &$form_state, $form_id) {
  // #id = user-register-form
  if ($form_id == 'user_register_form') {
    // Adding the store id
    $form['account']['store'] = array(
      '#type' => 'textfield',
      '#title' => t('Store ID'),
      '#size' => 15,
      '#required' => TRUE
    );

    $form['#validate'][] = 'elite_validation_user_register_validate';

    $form['#submit'][] = 'elite_validation_user_register_submit';

  }

}

/**
 * Form alter submit
 */
function elite_validation_user_register_validate($form, &$form_state) {
	// Check the store id against valid database ids
	$store_id = $form_state['values']['store'];
	if (!elite_store_valid_store_id($store_id)) {
		form_set_error('store', t('The Store ID you entered appears to be invalid. Please double check with your store manager.'));
	} else {
		// The store id is valid.
		// Check the store's region against the user's region.
		$user_region = $form_state['values']['field_region'][LANGUAGE_NONE][0]['value'];
		$store = elite_store_load_store(array('store_id' => $store_id));
		
		if ($user_region != $store->field_store_region[LANGUAGE_NONE][0]['value']) {
			form_set_error('store', t('The Region you entered does not match the Region of the Store ID you entered. Please double check with your store manager.'));
		}
	}
}

/**
 * Form alter submit
 */
function elite_validation_user_register_submit($form, &$form_state) {
  $store_id = $form_state['values']['store'];
  $user_id = $form_state['values']['uid'];
/*
  if($store_id == '00000') {
    // based on the store id, they are going to get a manager role
    // though it won't be validated
    // or they get a validated role if the store id matches an existing store
    // @todo make it a function

    // when they are a manager
    if (isset($form_state['values']['uid'])) {
      $role = user_role_load_by_name('manager');
      user_multiple_role_edit(array($user_id), 'add_role', $role->rid);
    }
  } else {
*/
    // They are an employee with a valid store id.
    // Set their account to validated and link them to the store.
    if (isset($form_state['values']['uid'])) {
      $role = user_role_load_by_name('validated');
      user_multiple_role_edit(array($user_id), 'add_role', $role->rid);
    }

    // Link them to the store they specified.
	//watchdog('employee link check', 'uid '. $user_id .' : store_id '. $store_id);
    $store = elite_store_load_store(array('store_id' => $store_id));
    node_object_prepare($store);
		$store1 = $store;
    //$store->field_store_employees[$store->language][]['target_id'] = (string) $user_id;
    $store->field_store_employees[LANGUAGE_NONE][]['target_id'] = (string) $user_id;
    node_submit($store);
    node_save($store);
	
	//watchdog('employee link check', 'uid '. $user_id .' : store_id '. $store_id .'<br />store check 1 : <pre>'. print_r($store1, true) .'</pre><br /><br />store check 2 : <pre>'. print_r($store, true) .'</pre>');
  //}
}

function elite_validation_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

  // if its a super cool content type, user content types machine name.
  if ( $op == 'view') {
		global $user;
		if ( $user->uid > 0 ) {
			return NODE_ACCESS_ALLOW;
		} else {
			// not logged in, can only view certain PAGES
			if ( $type == 'page' ) {
				$alias = drupal_get_path_alias('node/'. $node->nid);
				watchdog('anon nodecheck', $alias . ' : node : <pre>'. print_r($node,true) .'</pre>');
				if ( in_array( $alias, array('about', 'about/privacy-policy', 'about/cookie-policy', 'about/terms-conditions') ) ) {
					return NODE_ACCESS_ALLOW;
				}
			}
			return NODE_ACCESS_DENY;
		}
	}
	/*
    // Define roles that can see super cool content type content.
   global $user;
   $super_cool_perms = array_intersect(
       array(
     'role name',
     'role name 2',
     'role name 3',
     'role name 4',
     ),
       array_values($user->roles));
   // If they have any of these roles, then they can see the super cool content
   if ($super_cool_perms){
      return NODE_ACCESS_ALLOW;
    }
    else {
      return NODE_ACCESS_DENY;
    }
  }
	*/
  return NODE_ACCESS_IGNORE;
}