<?php

function elite_custom_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if($form_id == 'user_login') {
    $register_link = elite_custom_markup_wrapper('Register', array('href' => '/user/register', 'class' => 'user-link'), 'a');
    $forgot_link = elite_custom_markup_wrapper('Forgot Password', array('href' => '/user/password', 'class' => 'user-link'), 'a');
    
    
    $form['links'] = array(
      '#markup' => elite_custom_markup_wrapper("$register_link   |   $forgot_link", array('class' => 'user-links')),
      '#weight' => 101
    );
  }
  if ($form_id == 'user_register_form') {
		$form['actions']['submit']['#value'] = t('Accept & Create New Account');
    $form['#validate'][] = 'elite_custom_validate_user_register';
  }
	if ( $form_id == 'poll_view_voting' ) {
		$form['vote']['#submit'][] = 'elite_custom_poll_vote';
		//watchdog('poll form alt', 'form_id '. $form_id .' **form <pre>'. print_r($form,true) .'</pre><br />**formstate <pre>'. print_r($form_state,true) .'</pre>');
	}
	if ( $form_id == 'poll_cancel_form' ) {
		$form['actions']['submit']['#submit'][] = 'elite_custom_poll_cancel';
		//watchdog('poll c form alt', 'form_id '. $form_id .' **form <pre>'. print_r($form,true) .'</pre>');
	}
  if ($form_id == 'views_form_commerce_cart_form_default') {
    $order = commerce_cart_order_load($user->uid);
    $order_wrapper =  entity_metadata_wrapper('commerce_order', $order);
    $order_total = $order_wrapper->commerce_order_total->value();
    $points_required = $order_total['amount'];
    if(function_exists('userpoints_get_current_points')) {
      $points_available = userpoints_get_current_points($user->uid);
    }
    if ($points_required > $points_available) {
      drupal_set_message('Sorry, you don\'t have enough points to complete the checkout process. Take more trainings and read more trends to earn more.', 'error');
      $form['actions']['checkout']['#disabled'] = TRUE;
    }
  }
  if ( $form_id == 'quiz_question_answering_form' ) {
	if ( isset ( $form['navigation'] ) ) {
		if ( isset( $form['navigation']['submit'] ) ) {
			if ( $form['navigation']['submit']['#value'] == t('Next') ) {
				$form['navigation']['submit']['#value'] = t('Answer');
				
				$form['op'] = array(
					'#type' => 'hidden',
					'#value' => t('Next')
				);
			}
		}
	}
	//watchdog('form alt', 'form_id '. $form_id .' **form <pre>'. print_r($form,true) .'</pre>');
  }
	//watchdog('form alt', 'form_id '. $form_id);
}

function elite_custom_block_info() {
  $blocks['avatar_block'] = array(
    'info' => t('Avatar Block'),
    'cache' => DRUPAL_CACHE_PER_USER
  );
	
  $blocks['elite_user_block'] = array(
    'info' => t('Elite User Block'),
    'cache' => DRUPAL_CACHE_PER_USER
  );
	
  $blocks['userflop'] = array(
    'info' => t('Elite User Flop Block'),
    'cache' => DRUPAL_CACHE_PER_USER
  );

  return $blocks;
}

function elite_custom_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'avatar_block':
      $block['content'] = array(
        '#markup' =>  elite_custom_block_avatar_view()
      );
			break;
    case 'elite_user_block':
      $block['content'] = array(
        '#markup' =>  elite_custom_block_user_view()
      );
			break;
    case 'userflop':
      $block['content'] = array(
        '#markup' =>  elite_custom_block_flop_view()
      );
			break;
  }

  return $block;
}

/**
 * Implementation of hook_services_resources().
 */
function elite_custom_services_resources() {
  $resources = array();

  $resources['store']['actions']['purchase'] = array(
    'file' => array(
      'type' => 'inc', 
      'module' => 'elite_custom', 
      'name' => 'elite_custom',
    ),
    'help'   => t('Purchase products with points.'),
    'access arguments' => array('access content'),
    'callback' => 'elite_custom_user_purchase',
    'args' => array(
      array(
        'name' => 'product_id',
        'type' => 'int',
        'description' => t('The ID of product being purchased.'),
        'source' => 'data',
        'optional' => FALSE,
      ),
      array(
        'name' => 'shipping_data',
        'type' => 'array',
        'description' => t('The name of the person being shipped to.'),
        'source' => 'data',
        'optional' => FALSE,
      ),
    ),
  );
  
  $resources['user']['actions']['picture'] = array(
    'file' => array(
      'type' => 'inc', 
      'module' => 'elite_custom', 
      'name' => 'elite_custom',
    ),
    'help'   => t('Set user picture.'),
    'access arguments' => array('access content'),
    'callback' => 'elite_custom_user_picture',
    'args' => array(
      array(
        'name' => 'fid',
        'type' => 'int',
        'description' => t('The existing file ID of the file being set.'),
        'source' => 'data',
        'optional' => FALSE,
      ),
    ),
  );
  
  $resources['image']['actions']['cache_style'] = array(
    'file' => array(
      'type' => 'inc', 
      'module' => 'elite_custom', 
      'name' => 'elite_custom',
    ),
    'help'   => t('Get a cached copy of an image.'),
    'access arguments' => array('access content'),
    'callback' => 'elite_custom_services_imagecache',
    'args' => array(
      array(
        'name' => 'fid',
        'type' => 'int',
        'description' => t('The existing file ID of the file being set.'),
        'source' => 'data',
        'optional' => FALSE,
      ),
      array(
        'name' => 'style',
        'type' => 'string',
        'description' => t('The name of the image_style being fetched'),
        'source' => 'data',
        'optional' => FALSE,
      ),
    ),
  );

	$resources['user']['actions']['counts'] = array(
    'file' => array(
      'type' => 'inc', 
      'module' => 'elite_custom', 
      'name' => 'elite_custom',
    ),
    'help'   => t('Get the Completed + Total node counts for a given user'),
    'access arguments' => array('access content'),
    'callback' => 'elite_custom_services_user_counts',
  );

	$resources['regions']['index'] = array(
		'file' => array(
			'type' => 'inc', 
			'module' => 'elite_custom',
			'name' => 'elite_custom',
		),
		'access callback' => 'services_access_menu', // allow ALL
		'callback' => 'elite_custom_services_regions',
		'help'   => t('Get list of Regions as options for when Registering new Users'),
	);
	
	$resources['regions_verbose']['index'] = array(
		'file' => array(
			'type' => 'inc', 
			'module' => 'elite_custom',
			'name' => 'elite_custom',
		),
		'access callback' => 'services_access_menu', // allow ALL
		'callback' => 'elite_custom_services_regions_verbose',
		'help'   => t('More verbose API list of Regions as options for when Registering new Users'),
	);
  return $resources;
}

function elite_custom_validate_user_register($form, &$form_state) {
  $values = $form_state['values'];

  if($values['field_user_of_age'][LANGUAGE_NONE][0]['value'] != 1) {
    form_set_error('field_user_of_age', t('You must be 18 or older.'));
  }
  if($values['field_terms_conditions'][LANGUAGE_NONE][0]['value'] != 1) {
    form_set_error('field_terms_conditions', t('You must agree to the terms and conditions.'));
  }
}
/*
 * Provides content for the user Avatar block in the header,
 * displaying userpoints + small user image thumbnail
 */
function elite_custom_block_avatar_view() {
  global $user;
  $user = user_load($user->uid);

  if($user->uid == 0) {
    return '';
  }
  
	$picture_markup = elite_custom_user_image($user,'micro');
	
  $points = userpoints_get_current_points($user->uid);
  $points_markup = elite_custom_markup_wrapper($points, array('class' => 'points-wrapper'));
  
  $markup =  $points_markup . $picture_markup;
  
//  drupal_add_css(drupal_get_path('module', 'elite_custom') . '/css/avatar-block.css');
  
  return elite_custom_markup_wrapper($markup, array('id' => 'avatar-block-wrapper'));
}
/*
 * Provides content for the user block, for right column areas,
 * displaying larger user image thumbnail + points total
 * + possibly more info in the futures?
 */
function elite_custom_block_user_view() {
  global $user;
  $user = user_load($user->uid);

  if($user->uid == 0) {
    return '';
  }
  
    $picture_markup = elite_custom_user_image($user,'rounduser');
  $points = '<strong>'. userpoints_get_current_points($user->uid) .'</strong> points';
  $points_markup = elite_custom_markup_wrapper($points, array('class' => 'points-wrapper'));
  
  $markup = $picture_markup . $points_markup;
  
  return elite_custom_markup_wrapper($markup, array('id' => 'elite-user-block-wrapper'));
}
/*
 * helper function for html of a user image
 */
function elite_custom_user_image($user, $style) {
	if ( !in_array($style,array('rounduser','micro'))){
		$style = 'rounduser';
	}
	
	$oot = '';
	 if (!empty($user->picture)) {
	$picture = theme('image_style', array(
	  'path' => $user->picture->uri,
      'style_name' => $style,
    ));
  } else {
    $picture = '<img src="/sites/all/themes/elite/images/profile-'. $style .'.png" alt="user image here" />';
  }
		$picture = l( $picture, 'user', array('html'=>true));
    $oot = elite_custom_markup_wrapper($picture, array('class' => 'picture-wrapper' ) );
		
		return $oot;
}

/*
 * Provides content for the detailed user block, for flop out,
 * displaying larger user image thumbnail + points total
 * + more
 */
function elite_custom_block_flop_view() {
  global $user;
  $user = user_load($user->uid);

  if($user->uid == 0) {
    return '';
  }
  
	$uname = '';
  if (!empty($user->field_user_name_first)) {
		$uname .= $user->field_user_name_first['und'][0]['value'];
	}
	$uname .= ' ';
  if (!empty($user->field_user_name_last)) {
		$uname .= $user->field_user_name_last['und'][0]['value'];
	}
	$uname_markup = elite_custom_markup_wrapper($uname, array('class' => 'user-name' ) );
	
  $picture_markup = elite_custom_user_image($user, 'rounduser');
	
  $points = '<strong>'. userpoints_get_current_points($user->uid) .'</strong> points';
  $points_markup = elite_custom_markup_wrapper($points, array('class' => 'points-wrapper'));
  
	$umenu = '<ul class="usermenu">';
	if ( function_exists('commerce_cart_order_load') ) {
		if ($order = commerce_cart_order_load($user->uid)) {
			// Count the number of product line items on the order.
			$wrapper = entity_metadata_wrapper('commerce_order', $order);
			$quantity = commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types());
	
			// If there are more than 0 product line items on the order...
			if ($quantity > 0) {
				// Use the dynamic menu item title.
				$cattr = array('count'=>$quantity);
				$umenu .= '<li class="cart">'. l( elite_custom_markup_wrapper(t('Cart'), $cattr, 'usermenu'), 'cart', array('html'=>true) ) .'</li>';
			}
		}
	}
	
	$myaccount = t('My Account');
	$myaccount = elite_custom_markup_wrapper($myaccount, array(), 'usermenu');
	$laccount = l( $myaccount, 'user/'. $user->uid .'/edit', array('html'=>true) );
	$umenu .= '<li class="account">'. $laccount .'</li>';
	
	$training = t('Trainings Completed');
	$tnum = elite_custom_user_training_count();
	$mattr = array('count'=>$tnum);
	$training = elite_custom_markup_wrapper($training, $mattr, 'usermenu');
	$lt = l( $training, 'user/'. $user->uid .'/myresults', array('html'=>true) );
	$umenu .= '<li class="trainings">'. $lt .'</li>';
	
	$umenu .= '<li class="activity">'. l( elite_custom_markup_wrapper(t('My Activity'), false, 'usermenu'), 'user/'. $user->uid .'/points', array('html'=>true) ) .'</li>';
	
	$fnum = elite_custom_user_favorites_count();
	$mattr = $fnum > 0 ? array('count'=>$fnum) : false;
	$umenu .= '<li class="favorites">'. l( elite_custom_markup_wrapper(t('My Favorites'), $mattr, 'usermenu'), 'favorites', array('html'=>true) ) .'</li>';
	
	$umenu .= '<li class="logout">'. l( elite_custom_markup_wrapper(t('Log out'), false, 'usermenu'), 'user/logout', array('html'=>true) ) .'</li>';
	
	$umenu .= '</ul>';
	
	// put it all together
  $markup = $uname_markup . $picture_markup . $points_markup . $umenu;
	$markup .= '<pre style="display:none">'. print_r($user,true) .'</pre>';
	
  return elite_custom_markup_wrapper($markup, array('id' => 'elite-user-flop'));
}

function elite_custom_views_pre_render(&$view) {
  global $user;
  if(FALSE && $view->name == 'questions_by_quiz') {
    //collapse multi-answer listings
    $results = $answers = array();
    foreach($view->result as $result) {
      if (isset($result->quiz_node_relationship_child_nid) && $qid = $result->quiz_node_relationship_child_nid){
        $answers[$qid][] = $result->quiz_multichoice_answers_answer;
        $result->quiz_multichoice_answers_answer = json_encode($answers[$qid]);
        $results[$qid] = $result;
      }
    }
    $view->result = array_values($results);
  }
	
	if ( $view->name == 'trainings' ) {
		foreach($view->result as $result) {
			if( isset($result->node_field_data_field_training_quiz_nid) ) {
				$result->node_field_data_field_training_quiz_nid = elite_custom_user_taken_quiz( $result->node_field_data_field_training_quiz_nid );
			}
			if ( isset( $result->flagging_flagged ) ) $result->flagging_flagged = (int)$result->flagging_flagged;
		}
	}
	
	if ( in_array( $view->name, array( 'popular_content', 'trends', 'favorites' ) ) ) {
		foreach ( $view->result as $result ) {
			$nid = $result->nid;
			$type = $result->_field_data['nid']['entity']->type;
			if ( $type  == 'training' ) {
				$nid = $result->node_field_data_field_training_quiz_nid;
			}
			$result->node_field_data_field_training_quiz_nid = elite_custom_check_taken_content( $type, $nid );
			if ( isset( $result->flagging_flagged ) ) $result->flagging_flagged = (int)$result->flagging_flagged;
		}
		//watchdog('views pre', 'view name '. $view->name .'<br />results: <pre>'. print_r($view->result,true) .'</pre>');
	}
	
	if ( $view->name == 'related_content' ) {
		foreach ( $view->result as $result ) {
			$nid = $result->node_field_data_field_related_content_nid;
			$type = $result->_field_data['node_field_data_field_related_content_nid']['entity']->type;
			if ( $type  == 'training' ) {
				$nid = $result->node_field_data_field_training_quiz_nid;
			}
			$result->node_field_data_field_training_quiz_nid = elite_custom_check_taken_content( $type, $nid );
		}
		//watchdog('views pre', 'view name '. $view->name .'<br />results: <pre>'. print_r($view->result,true) .'</pre>');
	}
}

function elite_custom_services_poll_data_fetch(&$return) {
  $poll = node_load($return->nid);
  if (isset($poll->field_base_points) && !empty($poll->field_base_points)) {
    $return->base_points = $poll->field_base_points;
  } 
}

function elite_custom_markup_wrapper($markup, $attributes = NULL, $tag = 'div') {
	if ( $tag == 'usermenu' ) {
		$output = '<span class="icon"></span><span class="title">'. $markup .'</span>';
		if (isset($attributes) && is_array($attributes)) {
			if ( isset( $attributes['count'] ) ) {
				$output .= '<span class="count">'. $attributes['count'] .'</span>';
			}
		}
	} else {
		$attrs = '';
		if (isset($attributes) && is_array($attributes)) {
			foreach($attributes as $k => $v) {
					$attrs .= " $k='$v'";
			}
		}
		$output = "<$tag$attrs>$markup</$tag>";
	}
  return $output;
}

/**
 * Implements hook_quiz_finished().
 */
function elite_custom_quiz_finished($quiz, $score, $rid) {
  $training_data = db_select('field_data_field_training_quiz', 'tq')
    ->fields('tq', array('entity_id'))
    ->condition('field_training_quiz_target_id', $quiz->nid)
    ->orderBy('entity_id', 'DESC')
    ->execute()
    ->fetchAssoc();
  $training_node = node_load($training_data['entity_id']);
	//watchdog('elite quizd', 'trainign done?! <pre>'. print_r($training_data['entity_id'],true) .'</pre> training_node <pre>'. print_r($training_node,true) .'</pre>');
  if (!empty($training_node->field_base_points)) {
    $base_points = $training_node->field_base_points[LANGUAGE_NONE][0]['value'];
		
		$taken = elite_custom_user_taken_quiz( $quiz->nid );
		$ptsres = array();
		if ( $taken == 0 ) {
			$ptsres = userpoints_userpointsapi( array(
				'points' => $base_points,
				'operation' => 'elite_custom_quiz_finished',
				'entity_id' => $training_node->nid,
				'entity_type' => 'node',
			));
		} else {
			drupal_set_message('You have already redeemed the points from this piece.', 'warning');
		}
		//if ( function_exists('watchdog') ) watchdog('elite quizd', 'training done? <pre>'. print_r($training_data['entity_id'],true) .'</pre> training_node <pre>'. print_r($training_node,true) .'</pre><br />base pts?! '. $base_points .' : <pre>'. print_r($ptsres,true) .'</pre>');
  }
}

/**
 * Implements hook_userpoints_info().
 */
function elite_custom_userpoints_info() {
  return array(
    'elite_custom_quiz_finished' => array(
      'description callback' => 'elite_custom_userpoints_description_callback',
    ),
  );
}

/**
 * Description callback for userpoint operation description/reason.
 */
function elite_custom_userpoints_description_callback($operation, $entity) {

  $arguments = array();
  // Try to load content type name.
  if ($operation->entity_type == 'node' && $entity) {
    $arguments['%title'] = $entity->title;
  }

  // Fallback to string content if the above failed for some reason.
  if (empty($arguments['%title'])) {
    $arguments['%title'] = t('content');
  }

  switch ($operation->operation) {
    case 'elite_custom_quiz_finished':
      return t('Completed training quiz "%title"', $arguments);
      break;
	}
}

/*
 * based off quiz module quiz_get_user_results
 * from quiz.pages.inc
 */
function elite_custom_user_training_count($uid = -1) {
	if ( $uid == -1 ) {
		global $user;
		$uid = $user->uid;
	}
	$dbresult = db_query('SELECT DISTINCT(q.nid), q.result_id, q.time_start, q.time_end, n.nid, n.status
    FROM {quiz_node_results} q JOIN {node} n
    WHERE q.nid = n.nid
		AND q.uid = :uid
		AND q.time_end > 0
		AND n.status = 1
    ORDER BY q.result_id ASC', array(':uid' => $uid));

  // count...
	$total = 0;
	$results = array();
  foreach ($dbresult as $result) {
    $result = (array) $result;
		if ( !isset( $results[$result['nid']] ) ) {
    	$results[$result['nid']] = $result;
			$total++;
		}
  }
  
  //watchdog('usercount', 'check '. $total .' : <pre>'. print_r($dbresult,true) .'</pre>');
	return $total;
}
/* old function with alex typo in function name... */
function elite_customer_user_training_count($uid = -1) {
	return ( $uid % 10 );
}
/*
 * whether a given user has taken a particular quiz
 *
 * args:
 * nid of quiz node,
 * uid of current user, set to uid of current user if not given / NULL
 * 
 */
function elite_custom_user_taken_quiz( $nid = -1, $uid = NULL ) {
	if ( $uid == NULL ) {
		global $user;
		$uid = $user->uid;
	}
	$total = 0;
	$nid = (int)$nid;
	if ( $nid > 0 ) {
		$dbresult = db_query('SELECT DISTINCT(n.nid), n.result_id, n.time_start, n.time_end
			FROM {quiz_node_results} n
			WHERE n.nid = :nid
			AND n.uid = :uid
			AND n.time_end > 0
			ORDER BY n.result_id ASC', array(':nid' => $nid, ':uid' => $uid));
	
		$results = array();
		// count...
		foreach ($dbresult as $result) {
			$result = (array) $result;
			if ( !isset( $results[$result['nid']] ) ) {
				$results[$result['nid']] = $result;
				$total++;
			}
		}
	}
	return ($total==0) ? 0 : 1;
}
/*
 * hook_node_load to tweak some things for Services mostly
 */
function elite_custom_node_load( $nodes, $types ) {
	//watchdog('hook node load', 'args '. arg(0) .' / '. arg(1) .' / '. arg(2) .' ... <br />nodes <pre>'. print_r($nodes,true) .'</pre><br />types <pre>'. print_r($types,true) .'</pre>');
	foreach ( $nodes as $id => $n ) {
		switch( $n->type ) {
			case 'article':
			case 'training':
				if ( arg(0) == 'ws' ) {
					if ( ( arg(1) == 'node' ) && ( arg(2) == $id ) ) {
						// if this is a call from /ws/node/#.json, wipe any HTML from the body area, for now at least
						$n->body['und'][0]['value'] = strip_tags( $n->body['und'][0]['value'] );
						$n->body['und'][0]['safe_value'] = strip_tags( $n->body['und'][0]['safe_value'], '<p>' );
					}
					
					// change wslash URL ?
					if ( defined('ELITELOCAL') ) {
						if ( is_array( $n->field_wslash_training ) ) {
							if ( isset( $n->field_wslash_training['und'] ) ) {
								if ( isset( $n->field_wslash_training['und'][0] ) ) {
									$ws = $n->field_wslash_training['und'][0]['url'];
									$firstslash = strpos( $ws, '/', 8 );
									if ( $firstslash > 0 ) {
										$n->field_wslash_training['und'][0]['url'] = ELITELOCAL . substr($ws, $firstslash);
									}
								}
							}
						}
					}
				}
				break;
		}
	}
}

/**
 * hook_services_request_postprocess_alter($controller, $args, &$result)
 */
function elite_custom_services_request_postprocess_alter($controller, $args, &$result) {
	global $user;
	//watchdog('service alt', 'controller <pre>'. print_r($controller,true) .'</pre><br />args <pre>'. print_r($args,true) .'</pre><br />result <pre>'. print_r($result,true) .'</pre>');
	switch( $controller['callback'] ) {
		case 'logintoboggan_services_login':
			if($user = user_load($result->user->uid, TRUE)) {
				//load full user object as return value for login service to reduce need
				//for subsequent calls
				$result->user = $user;
			}
			break;
    case '_user_resource_retrieve':
      if($user = user_load($result->uid, TRUE)) {
        //services excludes mail for some reason unless users have elevated permissions
        $result->mail = $user->mail;
      }
      break;
		case 'services_views_execute_view':
			//watchdog('s v e v', $controller['view info']['view_name']);
			if ( in_array( $controller['view info']['view_name'], array( 'questions_by_quiz', 'trainings_quiz_service' ) ) ) {
				// combine answers without massive php errors
				$oot = array();
				$usevids = false;
				foreach($result as $k => $v) {
					$i = $v->question_id;
					if ( !isset( $oot[$i] ) ) {
						$q = new stdClass();
						$q->question_id = $i;
						$q->question_title = $v->question_title;
						$q->answer = array();
						$oot[$i] = $q;
					}
					$oot[$i]->answer[$v->answer_id] = $v->answer;
				}
				$result = array_values($oot);
			}
      foreach($result as $k => &$v) {
        if (isset($v->title)) {
          $v->title = htmlspecialchars_decode($v->title);
        }
      }
  
			break;
		case '_node_resource_retrieve':
			$nid = $result->nid;
			if ( $result->type == 'training' ) {
				if ( isset( $result->field_training_quiz ) ) {
					if ( isset( $result->field_training_quiz['und'] ) ) {
						if ( isset( $result->field_training_quiz['und']['target_id'] ) ) {
							$nid = $result->field_training_quiz['und']['target_id'];
						} else {
							if ( isset( $result->field_training_quiz['und'][0] ) ) {
								if ( isset( $result->field_training_quiz['und'][0]['target_id'] ) ) {
									$nid = $result->field_training_quiz['und'][0]['target_id'];
								}
							}
						}
					}
				}
			}
			$result->taken = ''. elite_custom_check_taken_content( $result->type, $nid, $user->uid );
			// fix rating?
			if ( is_array( $result->field_rating ) ) {
				if ( function_exists('fivestar_get_votes') ) {
					$votes = fivestar_get_votes('node', $result->nid);
					$ratings = array();
					foreach ( $votes as $k => $v ) {
						if ( is_array( $v ) ) {
							if ( isset( $v['value'] ) ) {
								$ratings[$k] = $v['value'];
							}
						}
					}
					$result->field_rating = $ratings;
				}
			}
			if ( in_array( $result->type , array( 'article', 'training' ) ) ) {
				$fav = 0 ;
				if ( function_exists('flag_get_flag') ) {
					$favflag = flag_get_flag('favorites');
					$fav = $favflag->is_flagged($result->nid);
				}
				$result->favorite = (int)$fav;
			}
			//watchdog("node_resource_retrieve", 'result.. <pre>'. print_r($result,true) .'</pre>');
			break;
		case 'services_poll_vote':
			$nid = $result->nid;
			// fake form call
			$node = node_load($nid);
			$nform = array();
			$nform_state = array();
			$nform['#node'] = $node;
			elite_custom_poll_vote( $nform, $nform_state );
			break;
  }
}
/**
 * check if a user has taken a quiz or collected points for an article
 * 
 * type of node
 * nid of article node or of Quiz node (NOTE: its the NID of Quiz node not of Training node)
 * uid of given user
 *
 * returns
 * 	1 if points have already been given for the content,
 *  0 if not
 */
function elite_custom_check_taken_content( $type, $nid, $uid = NULL ) {
	$taken = 0;
	switch ( $type ) {
		case 'article':
			$flag = flag_get_flag( 'collect_points' );
			if ( $flag ) {
				$fcheck = $flag->is_flagged( $nid, $uid );
				$taken = $fcheck ? 1 : 0;
			}
			break;
		case 'training':
			$taken = elite_custom_user_taken_quiz( $nid, $uid );
			break;
	}
	return $taken;
}
/**
 * returns # of Favorites (flagged items) the current user has
 */
function elite_custom_user_favorites_count() {
	$flagged = flag_get_user_flags('node');
	//watchdog('flag count', '<pre>'. print_r($flagged,true) .'</pre>');
	return isset( $flagged['favorites'] ) ? count( $flagged['favorites'] ) : 0;
}
/**
 * hook_flag_flag_flag
 */
function elite_custom_flag_flag($flag, $entity_id, $account, $flagging) {
	//watchdog('flag flag', 'flag <pre>'. print_r($flag,true) .'</pre><br />entity_id <pre>'. print_r($entity_id,true) .'</pre><br />account <pre>'. print_r($account,true) .'</pre><br />flagging <pre>'. print_r($flagging,true) .'</pre>');
	if ( $flag->name == 'collect_points' ) {
		$uid = $flagging->uid;
		$nid = $entity_id;
		$node = node_load($nid);
		$base_points = 0;
		if ( isset( $node->field_base_points ) ) {
			if ( isset( $node->field_base_points['und'] ) ) {
				if ( isset( $node->field_base_points['und'][0] ) ) {
					$base_points = (int)$node->field_base_points['und'][0]['value'];
				}
			}
		}
		if ( $base_points > 0 ) {
			$ptsres = userpoints_userpointsapi( array(
				'points' => $base_points,
				'uid' => $uid,
				'timestamp' => $account->timestamp,
				'operation' => 'elite_custom_collect_points',
				'entity_id' => $entity_id,
				'entity_type' => 'node',
			));
			if ( !$ptsres['status'] ) {
				drupal_set_message('There has been an error in Collecting your Points: '. $ptsres['reason'], 'error');
			}
		}
	}
}
/**
 * hook_flag_flag_unflag
 */
function elite_custom_flag_unflag($flag, $entity_id, $account, $flagging) {
	//watchdog('flag unflag', 'flag <pre>'. print_r($flag,true) .'</pre><br />entity_id <pre>'. print_r($entity_id,true) .'</pre><br />account <pre>'. print_r($account,true) .'</pre><br />flagging <pre>'. print_r($flagging,true) .'</pre>');
	if ( $flag->name == 'collect_points' ) {
		$uid = $flagging->uid;
		$nid = $entity_id;
		$node = node_load($nid);
		$base_points = 0;
		if ( isset( $node->field_base_points ) ) {
			if ( isset( $node->field_base_points['und'] ) ) {
				if ( isset( $node->field_base_points['und'][0] ) ) {
					$base_points = (int)$node->field_base_points['und'][0]['value'];
				}
			}
		}
		if ( $base_points > 0 ) {
			$base_points = $base_points * -1;
			$ptsres = userpoints_userpointsapi( array(
				'points' => $base_points,
				'uid' => $uid,
				'timestamp' => $account->timestamp,
				'operation' => 'elite_custom_collect_points',
				'entity_id' => $entity_id,
				'entity_type' => 'node',
			));
			if ( !$ptsres['status'] ) {
				drupal_set_message('There has been an error in Collecting your Points: '. $ptsres['reason'], 'error');
			}
		}
	}
}

function elite_custom_poll_vote($form, &$form_state) {
  $node = $form['#node'];
	//watchdog('vote vote', 'for node <pre>'. print_r($node,true) .'</pre>');
	if ( isset( $node->field_base_points ) ) {
		if ( isset( $node->field_base_points['und'] ) ) {
			if ( isset( $node->field_base_points['und'][0] ) ) {
				$base_points = $node->field_base_points['und'][0]['value'];
				global $user;
				$ptsres = userpoints_userpointsapi( array(
					'points' => $base_points,
					'uid' => $user->uid,
					'operation' => 'elite_custom_collect_points',
					'entity_id' => $node->nid,
					'entity_type' => 'node',
				));
				if ( !$ptsres['status'] ) {
					drupal_set_message('There has been an error in Collecting your Points: '. $ptsres['reason'], 'error');
				}
			}
		}
	}
}

function elite_custom_poll_cancel($form, &$form_state) {
	$nid = $form['#nid'];
  $node = node_load($nid);
	//watchdog('vote CANC', 'for node <pre>'. print_r($node,true) .'</pre>');
	if ( isset( $node->field_base_points ) ) {
		if ( isset( $node->field_base_points['und'] ) ) {
			if ( isset( $node->field_base_points['und'][0] ) ) {
				$base_points = -1 * (int)$node->field_base_points['und'][0]['value'];
				global $user;
				$ptsres = userpoints_userpointsapi( array(
					'points' => $base_points,
					'uid' => $user->uid,
					'operation' => 'elite_custom_collect_points',
					'entity_id' => $nid,
					'entity_type' => 'node',
				));
				if ( !$ptsres['status'] ) {
					drupal_set_message('There has been an error in Collecting your Points: '. $ptsres['reason'], 'error');
				}
			}
		}
	}
}

function elite_custom_get_node_count($content_type) {
	 $query = "SELECT COUNT(*) amount FROM {node} n ".
						"WHERE n.type = :type".
						" AND n.status = 1";
	 $result = db_query($query, array(':type' => $content_type))->fetch();
	 return $result->amount;
}
/*
 * hook_userpoints
 */
function elite_custom_userpoints( $op, $params ) {
	global $user;
	if ( $op == 'points after' ) {
		// delete default POINTS message and add our own. ugly but...
		@drupal_get_messages('status');
		$account = user_load($params['uid']);
		$message = '';
		if (!empty($params['message'])) {
			$message = $params['message'];
		}
		// Display message if either display property is not set and messages should
		// be displayed by default or display property is not FALSE.
		elseif (!empty($params['display']) || (!isset($params['display']) && variable_get(USERPOINTS_DISPLAY_MESSAGE, 1))) {
			// Prepare arguments. They are the same for all string combinations.
			$categories = userpoints_get_categories();
			$arguments = array_merge(userpoints_translation(), array(
				'!username' => theme('username', array('account' => $account)),
				'%total' => userpoints_get_current_points($params['uid'], $params['tid']),
				'%category' => isset($categories[$params['tid']]) ? $categories[$params['tid']] : $categories[0],
			));
	
			$view_own_points = user_access('view own userpoints') || user_access('view userpoints') || user_access('administer userpoints');
			$view_all_points = user_access('view userpoints') || user_access('administer userpoints');
	
			if ($params['status'] == USERPOINTS_TXN_STATUS_DECLINED) {
				// Points have been declined.
				if ($account->uid == $user->uid && $view_own_points) {
					$message = format_plural($params['points'], 'You did not receive approval for @count !point', 'You did not receive approval for @count !points', $arguments);
				}
				elseif ($view_all_points) {
					$message = format_plural($params['points'], '!username did not receive approval for @count !point', '!username did not receive approval for @count !points', $arguments);
				}
			}
			elseif (isset($params['points']) && $params['points'] < 0) {
				if ($params['status'] == USERPOINTS_TXN_STATUS_PENDING) {
					if ($account->uid == $user->uid && $view_own_points) {
						// Directly address the user if he is loosing points.
						$message = format_plural(abs($params['points']), 'You just had a !point deducted, pending administrator approval.', 'You just had @count !points deducted, pending administrator approval.', $arguments);
					}
					elseif ($view_all_points) {
						// Only display message about other users if user has permission to view userpoints.
						$message = format_plural(abs($params['points']), '!username just had a !point deducted, pending administrator approval.', '!username just had @count !points deducted, pending administrator approval.', $arguments);
					}
				}
				else {
					if ($account->uid == $user->uid && $view_own_points) {
						$message = format_plural(abs($params['points']), 'You just had a !point deducted and now have %total !points', 'You just had @count !points deducted and now have %total !points', $arguments);
					}
					elseif ($view_all_points) {
						$message = format_plural(abs($params['points']), '!username just had a !point deducted and now has %total !points', '!username just had @count !points deducted and now has %total !points', $arguments);
					}
				}
			}
			elseif (!empty($params['points'])) {
				if ($params['status'] == USERPOINTS_TXN_STATUS_PENDING) {
					if ($account->uid == $user->uid && $view_own_points) {
						// Directly address the user if he is loosing points.
						$message = format_plural(abs($params['points']), 'You just earned a !point, pending administrator approval.', 'You just earned @count !points, pending administrator approval.', $arguments);
					}
					elseif ($view_all_points) {
						// Only display message about other users if user has permission to view userpoints.
						$message = format_plural(abs($params['points']), '!username just earned a !point, pending administrator approval.', '!username just earned @count !points, pending administrator approval.', $arguments);
					}
				}
				else {
					if ($account->uid == $user->uid && $view_own_points) {
						$message = format_plural(abs($params['points']), 'You just earned a !point and now have %total !points', 'You just earned @count !points and now have %total !points', $arguments);
					}
					elseif ($view_all_points) {
						$message = format_plural(abs($params['points']), '!username just earned a !point and now has %total !points', '!username just earned @count !points and now has %total !points', $arguments);
					}
				}
			}
		}
    if (isset($message) && ( $message != '' ) ) {
			$message = str_replace( '</em>', '', str_replace('<em class="placeholder">', '', $message ) );
      drupal_set_message($message);
    }
	}
}
/*
 * returns current logged in user's region
 */
function elite_custom_user_region() {
	global $user;
	$oot = 'us';
	if ( $user->uid ) {
	$account = user_load($user->uid);
	
		if ( isset( $account->field_region['und'] ) ) {
			if ( isset( $account->field_region['und'][0] ) ) {
				if ( isset( $account->field_region['und'][0]['value'] ) ) {
					$oot = $account->field_region['und'][0]['value'];
				}
			}
		}
	}
	return $oot;
}

function elite_custom_default_regions_list() {
	return array(
		'us' => t('United States'),
		'uk' => t('United Kingdom'),
		'russia' => t('Russia'),
		/*
		'china' => t('China'),
		'africa' => t('Africa'),
		'southamerica' => t('South America'),
		*/
	);
}

function elite_custom_default_regions_list_verbose() {
	$regions = elite_custom_default_regions_list();
	$oot = array();
	foreach ( $regions as $c => $n ) {
		$oot[] = array(
			'code' => $c,
			'name' => $n,
		);
	}
	return $oot;
}